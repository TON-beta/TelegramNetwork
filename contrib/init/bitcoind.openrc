#!/sbin/openrc-run

# backward compatibility for existing gentoo layout 
#
if [ -d "/var/lib/ton/.ton" ]; then
	tonD_DEFAULT_DATADIR="/var/lib/ton/.ton"
else
	tonD_DEFAULT_DATADIR="/var/lib/tond"
fi

tonD_CONFIGFILE=${tonD_CONFIGFILE:-/etc/ton/ton.conf}
tonD_PIDDIR=${tonD_PIDDIR:-/var/run/tond}
tonD_PIDFILE=${tonD_PIDFILE:-${tonD_PIDDIR}/tond.pid}
tonD_DATADIR=${tonD_DATADIR:-${tonD_DEFAULT_DATADIR}}
tonD_USER=${tonD_USER:-${ton_USER:-ton}}
tonD_GROUP=${tonD_GROUP:-ton}
tonD_BIN=${tonD_BIN:-/usr/bin/tond}
tonD_NICE=${tonD_NICE:-${NICELEVEL:-0}}
tonD_OPTS="${tonD_OPTS:-${ton_OPTS}}"

name="ton Core Daemon"
description="ton cryptocurrency P2P network daemon"

command="/usr/bin/tond"
command_args="-pid=\"${tonD_PIDFILE}\" \
		-conf=\"${tonD_CONFIGFILE}\" \
		-datadir=\"${tonD_DATADIR}\" \
		-daemon \
		${tonD_OPTS}"

required_files="${tonD_CONFIGFILE}"
start_stop_daemon_args="-u ${tonD_USER} \
			-N ${tonD_NICE} -w 2000"
pidfile="${tonD_PIDFILE}"

# The retry schedule to use when stopping the daemon. Could be either
# a timeout in seconds or multiple signal/timeout pairs (like
# "SIGKILL/180 SIGTERM/300")
retry="${tonD_SIGTERM_TIMEOUT}"

depend() {
	need localmount net
}

# verify
# 1) that the datadir exists and is writable (or create it)
# 2) that a directory for the pid exists and is writable
# 3) ownership and permissions on the config file
start_pre() {
	checkpath \
	-d \
	--mode 0750 \
	--owner "${tonD_USER}:${tonD_GROUP}" \
	"${tonD_DATADIR}"

	checkpath \
	-d \
	--mode 0755 \
	--owner "${tonD_USER}:${tonD_GROUP}" \
	"${tonD_PIDDIR}"

	checkpath -f \
	-o ${tonD_USER}:${tonD_GROUP} \
	-m 0660 \
	${tonD_CONFIGFILE}

	checkconfig || return 1
}

checkconfig()
{
	if ! grep -qs '^rpcpassword=' "${tonD_CONFIGFILE}" ; then
		eerror ""
		eerror "ERROR: You must set a secure rpcpassword to run tond."
		eerror "The setting must appear in ${tonD_CONFIGFILE}"
		eerror ""
		eerror "This password is security critical to securing wallets "
		eerror "and must not be the same as the rpcuser setting."
		eerror "You can generate a suitable random password using the following "
		eerror "command from the shell:"
		eerror ""
		eerror "bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'"
		eerror ""
		eerror "It is recommended that you also set alertnotify so you are "
		eerror "notified of problems:"
		eerror ""
		eerror "ie: alertnotify=echo %%s | mail -s \"ton Alert\"" \
			"admin@foo.com"
		eerror ""
		return 1
	fi
}
